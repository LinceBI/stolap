/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 */
package org.pivot4j.mdx.impl;

import org.pivot4j.mdx.*;
import java_cup.runtime.Symbol;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("unused")
%%

%{
  protected Logger logger = LoggerFactory.getLogger(getClass());
%}

%eofval{
  return new Symbol(Symbols.EOF, null);
%eofval}

AND=[Aa][Nn][Dd]
AS=[Aa][Ss]
CASE=[Cc][Aa][Ss][Ee]
CELL=[Cc][Ee][Ll][Ll]
DIMENSION=[Dd][Ii][Mm][Ee][Nn][Ss][Ii][Oo][Nn]
DRILLTHROUGH=[Dd][Rr][Ii][Ll][Ll][Tt][Hh][Rr][Oo][Uu][Gg][Hh]
ELSE=[Ee][Ll][Ss][Ee]
EMPTY=[Ee][Mm][Pp][Tt][Yy]
END=[Ee][Nn][Dd]
FROM=[Ff][Rr][Oo][Mm]
MEMBER=[Mm][Ee][Mm][Bb][Ee][Rr]
NON=[Nn][Oo][Nn]
NOT=[Nn][Oo][Tt]
ON=[Oo][Nn]
OR=[Oe][Rr]
PROPERTIES=[Pp][Rr][Oo][Pp][Ee][Rr][Tt][Ii][Ee][Ss]
SELECT=[Ss][Ee][Ll][Ee][Cc][Tt]
SET=[Ss][Ee][Tt]
THEN=[Tt][Hh][Ee][Nn]
WHEN=[Ww][Hh][Ee][Nn]
WITH=[Ww][Ii][Tt][Hh]
WHERE=[Ww][Hh][Ee][Rr][Ee]
SAP=[Ss][Aa][Pp]
VARIABLES=[Vv][Aa][Rr][Ii][Aa][Bb][Ll][Ee][Ss]
INCLUDING=[Ii][Nn][Cc][Ll][Uu][Dd][Ii][Nn][Gg]
EXCLUDING=[Ee][Xx][Cc][Ll][Uu][Dd][Ii][Nn][Gg]
XOR=[Xx][Oo][Rr]
WHITESPACE=[\ \t\r\n\f]
ALPHA=[a-zA-Z]
ALNUM=[a-zA-Z_0-9]
IDENT={ALPHA}{ALNUM}*
INSTRING=[^\"\n\f\r\t]
INSTRING2=[^'\n\f\r\t]
INSTRING3=[^\]]|\]\]
IDSTRING=[^\]\n\f\r\t]|\]\]
BRACKETID=\[{IDSTRING}*\]
BRACKETSTR=\[{INSTRING3}*\]
BRACESTR=\{{INSTRING3}*\}
DIGIT=[0-9]
INTEGER={DIGIT}+
EXP=([eE](\+|\-)?{DIGIT}+)
FLOAT=({DIGIT}+\.{DIGIT}*{EXP}?|{DIGIT}*\.{DIGIT}+{EXP}?|{DIGIT}+{EXP})

%cup
%unicode
%public

%state AFTER_AS1
%state AFTER_AS2

%%
{AND} { return new Symbol(Symbols.AND, "AND"); }
{AS} { yybegin(AFTER_AS1); return new Symbol(Symbols.AS, "AS"); }
{CASE} { return new Symbol(Symbols.CASE, "CASE"); }
{CELL} { return new Symbol(Symbols.CELL, "CELL"); }
{DIMENSION} { return new Symbol(Symbols.DIMENSION, "DIMENSION"); }
{DRILLTHROUGH} { return new Symbol(Symbols.DRILLTHROUGH, "DRILLTHROUGH"); }
{ELSE} { return new Symbol(Symbols.ELSE, "ELSE"); }
{EMPTY} { return new Symbol(Symbols.EMPTY, "EMPTY"); }
{END} { return new Symbol(Symbols.END, "END"); }
{FROM} { return new Symbol(Symbols.FROM, "FROM"); }
{MEMBER} { return new Symbol(Symbols.MEMBER, "MEMBER"); }
{NON} { return new Symbol(Symbols.NON, "NON"); }
{NOT} { return new Symbol(Symbols.NOT, "NOT"); }
{ON} { return new Symbol(Symbols.ON, "ON"); }
{OR} { return new Symbol(Symbols.OR, "OR"); }
{PROPERTIES} { return new Symbol(Symbols.PROPERTIES, "PROPERTIES"); }
{SELECT} { return new Symbol(Symbols.SELECT, "SELECT"); }
{SET} { return new Symbol(Symbols.SET, "SET"); }
{THEN} { return new Symbol(Symbols.THEN, "THEN"); }
{WHEN} { return new Symbol(Symbols.WHEN, "WHEN"); }
{WITH} { return new Symbol(Symbols.WITH, "WITH"); }
{WHERE} { return new Symbol(Symbols.WHERE, "WHERE"); }
{SAP} { return new Symbol(Symbols.SAP, "SAP"); }
{VARIABLES} { return new Symbol(Symbols.VARIABLES, "VARIABLES"); }
{INCLUDING} { return new Symbol(Symbols.INCLUDING, "INCLUDING"); }
{EXCLUDING} { return new Symbol(Symbols.EXCLUDING, "EXCLUDING"); }
{XOR} { return new Symbol(Symbols.XOR, "XOR"); }
":" { return new Symbol(Symbols.COLON, ":"); }
"," { return new Symbol(Symbols.COMMA, ","); }
"=" { return new Symbol(Symbols.EQ, "="); }
"<>" { return new Symbol(Symbols.NE, "<>"); }
"<=" { return new Symbol(Symbols.LE, "<="); }
"<" { return new Symbol(Symbols.LT, "<"); }
">=" { return new Symbol(Symbols.GE, ">="); }
">" { return new Symbol(Symbols.GT, ">"); }
"{" { return new Symbol(Symbols.LBRACE, "{"); }
"(" { return new Symbol(Symbols.LPAREN, "("); }
"}" { return new Symbol(Symbols.RBRACE, "}"); }
")" { return new Symbol(Symbols.RPAREN, ")"); }
"+" { return new Symbol(Symbols.PLUS, "+"); }
"-" { return new Symbol(Symbols.MINUS, "-"); }
"*" { return new Symbol(Symbols.ASTERISK, "*"); }
"/" { return new Symbol(Symbols.SOLIDUS, "/"); }
"||" { return new Symbol(Symbols.CONCAT, "||"); }
"." { return new Symbol(Symbols.DOT, "."); }
<AFTER_AS1> "'" {yybegin(AFTER_AS2); return new Symbol(Symbols.QUOTE, "'"); }
<AFTER_AS2> "'" {yybegin(YYINITIAL); return new Symbol(Symbols.QUOTE, "'"); }
{INTEGER} { Double d = new Double(yytext()); return new Symbol(Symbols.NUMBER, d); }
{FLOAT} { Double d = new Double(yytext()); return new Symbol(Symbols.NUMBER, d); }
{IDENT} { return new Symbol(Symbols.ID, yytext()); }
{BRACKETID} { return new Symbol(Symbols.QUOTED_ID, yytext()); }
"$"{BRACKETSTR} { return new Symbol(Symbols.MEMBER_PARAM, yytext()); }
"$"{BRACESTR} { return new Symbol(Symbols.VALUE_PARAM, yytext()); }
("&"{BRACKETID})* { return new Symbol(Symbols.AMP_QUOTED_ID, yytext()); }
"\""{INSTRING}*"\"" { return new Symbol(Symbols.STRING, yytext()); }
<YYINITIAL> "'"{INSTRING2}*"'" { return new Symbol(Symbols.STRING, yytext()); }
{WHITESPACE} { /* ignore white space. */ }
. {	if (logger.isWarnEnabled()) logger.warn("Unmatched input: " + yytext()); return new Symbol(Symbols.UNKNOWN, yytext()); }
